/* eslint perfectionist/sort-objects: "warn" */
/* cSpell:disable */

import type { FlatConfig } from '~/types'
import { pluginTypescript } from '~/definition'
import { tsParser } from '~/utils'

export function typescript(): FlatConfig {
  return [
    {
      files: [
        '**/*.?([cm])ts',
        '**/*.?([cm])tsx',
        '**/*.vue',
      ],
      languageOptions: {
        parser: tsParser,
        parserOptions: {
          extraFileExtensions: ['.vue'],
          sourceType: 'module',
        },
      },
      name: 'typescript',
      plugins: {
        ts: pluginTypescript as any,
      },
      rules: {
        'constructor-super': 'off',
        'getter-return': 'off',
        'no-array-constructor': 'off',
        'no-class-assign': 'off',
        'no-const-assign': 'off',
        'no-dupe-args': 'off',
        'no-dupe-class-members': 'off',
        'no-dupe-keys': 'off',
        'no-func-assign': 'off',
        'no-import-assign': 'off',
        'no-new-native-nonconstructor': 'off',
        'no-new-symbol': 'off',
        'no-obj-calls': 'off',
        'no-redeclare': 'off',
        'no-setter-return': 'off',
        'no-this-before-super': 'off',
        'no-undef': 'off',
        'no-unreachable': 'off',
        'no-unsafe-negation': 'off',
        'no-unused-expressions': 'off',
        'no-unused-vars': 'off',
        'no-use-before-define': 'off',
        'no-useless-constructor': 'off',
        'no-var': 'error',
        'no-with': 'off',
        'prefer-const': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'ts/ban-ts-comment': ['error', { 'ts-expect-error': 'allow-with-description' }],
        'ts/consistent-type-definitions': ['error', 'interface'],
        'ts/consistent-type-imports': ['error', { disallowTypeAnnotations: false, fixStyle: 'separate-type-imports', prefer: 'type-imports' }],
        'ts/explicit-function-return-type': 'off',
        'ts/method-signature-style': ['error', 'property'],
        'ts/no-array-constructor': 'error',
        'ts/no-dupe-class-members': 'error',
        'ts/no-duplicate-enum-values': 'error',
        'ts/no-dynamic-delete': 'off',
        'ts/no-empty-object-type': ['error', { allowInterfaces: 'always' }],
        'ts/no-explicit-any': 'off',
        'ts/no-extra-non-null-assertion': 'error',
        'ts/no-extraneous-class': 'off',
        'ts/no-import-type-side-effects': 'error',
        'ts/no-invalid-void-type': 'off',
        'ts/no-misused-new': 'error',
        'ts/no-namespace': 'error',
        'ts/no-non-null-asserted-nullish-coalescing': 'error',
        'ts/no-non-null-asserted-optional-chain': 'error',
        'ts/no-non-null-assertion': 'off',
        'ts/no-redeclare': ['error', { builtinGlobals: false }],
        'ts/no-require-imports': 'error',
        'ts/no-this-alias': 'error',
        'ts/no-unnecessary-type-constraint': 'error',
        'ts/no-unsafe-declaration-merging': 'error',
        'ts/no-unsafe-function-type': 'error',
        'ts/no-unused-expressions': ['error', { allowShortCircuit: true, allowTaggedTemplates: true, allowTernary: true }],
        'ts/no-unused-vars': 'off',
        'ts/no-use-before-define': ['error', { classes: false, functions: false, variables: true }],
        'ts/no-useless-constructor': 'off',
        'ts/no-wrapper-object-types': 'error',
        'ts/prefer-as-const': 'error',
        'ts/prefer-literal-enum-member': 'error',
        'ts/prefer-namespace-keyword': 'error',
        'ts/triple-slash-reference': 'off',
        'ts/unified-signatures': 'off',
      },
    },
  ]
}
