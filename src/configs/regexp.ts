/* eslint perfectionist/sort-objects: "warn" */
/* cSpell:disable */

import type { FlatConfig } from '~/types'
import { pluginRegExp } from '~/definition'

export function regexp(): FlatConfig {
  return {
    name: 'regexp',
    plugins: {
      regexp: pluginRegExp,
    },
    rules: {
      'no-control-regex': 'warn',
      'no-empty-character-class': 'off',
      'no-invalid-regexp': 'off',
      'no-misleading-character-class': 'warn',
      'no-regex-spaces': 'warn',
      'no-useless-backreference': 'off',
      'prefer-regex-literals': 'warn',

      'regexp/confusing-quantifier': 'warn',
      'regexp/control-character-escape': 'warn',
      'regexp/match-any': 'warn',
      'regexp/negation': 'warn',
      'regexp/no-contradiction-with-assertion': 'warn',
      'regexp/no-dupe-characters-character-class': 'warn',
      'regexp/no-dupe-disjunctions': 'warn',
      'regexp/no-empty-alternative': 'warn',
      'regexp/no-empty-capturing-group': 'warn',
      'regexp/no-empty-character-class': 'warn',
      'regexp/no-empty-group': 'warn',
      'regexp/no-empty-lookarounds-assertion': 'warn',
      'regexp/no-empty-string-literal': 'warn',
      'regexp/no-escape-backspace': 'warn',
      'regexp/no-extra-lookaround-assertions': 'warn',
      'regexp/no-invalid-regexp': 'warn',
      'regexp/no-invisible-character': 'warn',
      'regexp/no-lazy-ends': 'warn',
      'regexp/no-legacy-features': 'warn',
      'regexp/no-misleading-capturing-group': 'warn',
      'regexp/no-misleading-unicode-character': 'warn',
      'regexp/no-missing-g-flag': 'warn',
      'regexp/no-non-standard-flag': 'warn',
      'regexp/no-obscure-range': 'warn',
      'regexp/no-optional-assertion': 'warn',
      'regexp/no-potentially-useless-backreference': 'warn',
      'regexp/no-super-linear-backtracking': 'warn',
      'regexp/no-trivially-nested-assertion': 'warn',
      'regexp/no-trivially-nested-quantifier': 'warn',
      'regexp/no-unused-capturing-group': 'warn',
      'regexp/no-useless-assertions': 'warn',
      'regexp/no-useless-backreference': 'warn',
      'regexp/no-useless-character-class': 'warn',
      'regexp/no-useless-dollar-replacements': 'warn',
      'regexp/no-useless-escape': 'warn',
      'regexp/no-useless-flag': 'warn',
      'regexp/no-useless-lazy': 'warn',
      'regexp/no-useless-non-capturing-group': 'warn',
      'regexp/no-useless-quantifier': 'warn',
      'regexp/no-useless-range': 'warn',
      'regexp/no-useless-set-operand': 'warn',
      'regexp/no-useless-string-literal': 'warn',
      'regexp/no-useless-two-nums-quantifier': 'warn',
      'regexp/no-zero-quantifier': 'warn',
      'regexp/optimal-lookaround-quantifier': 'warn',
      'regexp/optimal-quantifier-concatenation': 'warn',
      'regexp/prefer-character-class': 'warn',
      'regexp/prefer-d': 'warn',
      'regexp/prefer-plus-quantifier': 'warn',
      'regexp/prefer-predefined-assertion': 'warn',
      'regexp/prefer-question-quantifier': 'warn',
      'regexp/prefer-range': 'warn',
      'regexp/prefer-set-operation': 'warn',
      'regexp/prefer-star-quantifier': 'warn',
      'regexp/prefer-unicode-codepoint-escapes': 'warn',
      'regexp/prefer-w': 'warn',
      'regexp/simplify-set-operations': 'warn',
      'regexp/sort-flags': 'warn',
      'regexp/strict': 'warn',
      'regexp/use-ignore-case': 'warn',
    },
  }
}
